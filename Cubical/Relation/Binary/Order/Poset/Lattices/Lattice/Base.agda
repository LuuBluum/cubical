{-# OPTIONS --safe #-}
module Cubical.Relation.Binary.Order.Poset.Lattices.Lattice.Base where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Equiv.HalfAdjoint
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.Univalence
open import Cubical.Foundations.Transport
open import Cubical.Foundations.SIP

open import Cubical.Functions.Embedding

open import Cubical.Data.Sigma

open import Cubical.Reflection.RecordEquiv
open import Cubical.Reflection.StrictEquiv

open import Cubical.Displayed.Base
open import Cubical.Displayed.Auto
open import Cubical.Displayed.Record
open import Cubical.Displayed.Universe

open import Cubical.Relation.Binary.Base
open import Cubical.Relation.Binary.Order.Poset.Base
open import Cubical.Relation.Binary.Order.Poset.Properties

open Iso
open BinaryRelation


private
  variable
    ‚Ñì ‚Ñì' ‚Ñì'' ‚Ñì‚ÇÄ ‚Ñì‚ÇÄ' ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ' : Level

record IsLattice {A : Type ‚Ñì} (_‚â§_ : A ‚Üí A ‚Üí Type ‚Ñì') (_‚à®l_ _‚àßl_ : A ‚Üí A ‚Üí A) (0l 1l : A) : Type (‚Ñì-max ‚Ñì ‚Ñì') where
  no-eta-equality
  constructor islattice

  field
    is-poset : IsPoset _‚â§_
    is-join : ‚àÄ a b x ‚Üí (a ‚à®l b) ‚â§ x ‚âÉ (a ‚â§ x) √ó (b ‚â§ x)
    is-meet : ‚àÄ a b x ‚Üí x ‚â§ (a ‚àßl b) ‚âÉ (x ‚â§ a) √ó (x ‚â§ b)
    is-least : ‚àÄ x ‚Üí 0l ‚â§ x
    is-greatest : ‚àÄ x ‚Üí x ‚â§ 1l

unquoteDecl IsLatticeIsoŒ£ = declareRecordIsoŒ£ IsLatticeIsoŒ£ (quote IsLattice)


record LatticeStr (‚Ñì' : Level) (A : Type ‚Ñì) : Type (‚Ñì-max ‚Ñì (‚Ñì-suc ‚Ñì')) where

  constructor latticestr

  field
    _‚â§_     : A ‚Üí A ‚Üí Type ‚Ñì'
    _‚à®l_    : A ‚Üí A ‚Üí A
    _‚àßl_    : A ‚Üí A ‚Üí A
    0l      : A
    1l      : A
    isLattice : IsLattice _‚â§_ _‚à®l_ _‚àßl_ 0l 1l

  infixl 7 _‚â§_
  infixl 8 _‚à®l_
  infixl 8 _‚àßl_

  open IsLattice isLattice public

LatticeStr‚ÜíPosetStr : ‚àÄ{‚Ñì'} ‚Üí {A : Type ‚Ñì} ‚Üí (LatticeStr ‚Ñì' A) ‚Üí (PosetStr ‚Ñì' A)
LatticeStr‚ÜíPosetStr lat = posetstr (LatticeStr._‚â§_ lat)
                                         (IsLattice.is-poset
                                         (LatticeStr.isLattice lat))

Lattice : ‚àÄ ‚Ñì ‚Ñì' ‚Üí Type (‚Ñì-max (‚Ñì-suc ‚Ñì) (‚Ñì-suc ‚Ñì'))
Lattice ‚Ñì ‚Ñì' = TypeWithStr ‚Ñì (LatticeStr ‚Ñì')

lattice : (A : Type ‚Ñì) ‚Üí (_‚â§_ : Rel A A ‚Ñì') ‚Üí (_‚à®l_ _‚àßl_ : A ‚Üí A ‚Üí A) (0l 1l : A) ‚Üí IsLattice _‚â§_ _‚à®l_ _‚àßl_ 0l 1l ‚Üí Lattice ‚Ñì ‚Ñì'
lattice A _‚â§_ _‚à®l_ _‚àßl_ 0l 1l lat = A , (latticestr _‚â§_ _‚à®l_ _‚àßl_ 0l 1l lat)


record IsLatticeEquiv {A : Type ‚Ñì‚ÇÄ} {B : Type ‚Ñì‚ÇÅ}
  (M : LatticeStr ‚Ñì‚ÇÄ' A) (e : A ‚âÉ B) (N : LatticeStr ‚Ñì‚ÇÅ' B)
  : Type (‚Ñì-max (‚Ñì-max ‚Ñì‚ÇÄ ‚Ñì‚ÇÅ) (‚Ñì-max ‚Ñì‚ÇÄ' ‚Ñì‚ÇÅ'))
  where
  constructor
   islatticeequiv
  -- Shorter qualified names
  private
    module M = LatticeStr M
    module N = LatticeStr N

  field
    pres‚â§ : (x y : A) ‚Üí x M.‚â§ y ‚âÉ equivFun e x N.‚â§ equivFun e y
    pres‚à® : (x y : A) ‚Üí equivFun e (x M.‚à®l y) ‚â° (equivFun e x) N.‚à®l (equivFun e y)
    pres‚àß : (x y : A) ‚Üí equivFun e (x M.‚àßl y) ‚â° (equivFun e x) N.‚àßl (equivFun e y)
    pres0 : equivFun e (M.0l) ‚â° N.0l
    pres1 : equivFun e (M.1l) ‚â° N.1l

unquoteDecl IsLatticeEquivIsoŒ£ = declareRecordIsoŒ£ IsLatticeEquivIsoŒ£ (quote IsLatticeEquiv)

LatticeEquiv : (M : Lattice ‚Ñì‚ÇÄ ‚Ñì‚ÇÄ') (M : Lattice ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ') ‚Üí Type (‚Ñì-max (‚Ñì-max ‚Ñì‚ÇÄ ‚Ñì‚ÇÄ') (‚Ñì-max ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ'))
LatticeEquiv M N = Œ£[ e ‚àà ‚ü® M ‚ü© ‚âÉ ‚ü® N ‚ü© ] IsLatticeEquiv (M .snd) e (N .snd)

isPropIsLattice : {A : Type ‚Ñì} (_‚â§_ : A ‚Üí A ‚Üí Type ‚Ñì') (_‚à®l_ _‚àßl_ : A ‚Üí A ‚Üí A) (0l 1l : A) ‚Üí isProp (IsLattice _‚â§_ _‚à®l_ _‚àßl_ 0l 1l)
isPropIsLattice _‚â§_ _‚à®l_ _‚àßl_ 0l 1l = isOfHLevelRetractFromIso 1 IsLatticeIsoŒ£
  (isPropŒ£ (isPropIsPoset _)
    Œª pos ‚Üí isProp√ó (isPropŒ†3 (Œª _ _ _ ‚Üí isOfHLevel‚âÉ 1 (IsPoset.is-prop-valued pos _ _)
                                                        (isProp√ó (IsPoset.is-prop-valued pos _ _)
                                                                 (IsPoset.is-prop-valued pos _ _))))
           (isProp√ó (isPropŒ†3 Œª _ _ _ ‚Üí isOfHLevel‚âÉ 1 (IsPoset.is-prop-valued pos _ _)
                                                       (isProp√ó (IsPoset.is-prop-valued pos _ _)
                                                                (IsPoset.is-prop-valued pos _ _)))
           (isProp√ó (isPropŒ† (Œª _ ‚Üí IsPoset.is-prop-valued pos _ _))
                    (isPropŒ† Œª _ ‚Üí IsPoset.is-prop-valued pos _ _))))

isPropIsLatticeEquiv : {A : Type ‚Ñì‚ÇÄ} {B : Type ‚Ñì‚ÇÅ}
                                     (M : LatticeStr ‚Ñì‚ÇÄ' A)
                                     (e : A ‚âÉ B)
                                     (N : LatticeStr ‚Ñì‚ÇÅ' B)
                                   ‚Üí isProp (IsLatticeEquiv M e N)
isPropIsLatticeEquiv M e N = isOfHLevelRetractFromIso 1 IsLatticeEquivIsoŒ£
  (isProp√ó (isPropŒ†2 (Œª _ _ ‚Üí isOfHLevel‚âÉ 1 (IsPoset.is-prop-valued (IsLattice.is-poset (LatticeStr.isLattice M)) _ _)
                                             (IsPoset.is-prop-valued (IsLattice.is-poset (LatticeStr.isLattice N)) _ _)))
  (isProp√ó (isPropŒ†2 (Œª _ _ ‚Üí IsPoset.is-set (IsLattice.is-poset (LatticeStr.isLattice N)) _ _))
  (isProp√ó (isPropŒ†2 (Œª _ _ ‚Üí IsPoset.is-set (IsLattice.is-poset (LatticeStr.isLattice N)) _ _))
  (isProp√ó (IsPoset.is-set (IsLattice.is-poset (LatticeStr.isLattice N)) _ _)
           (IsPoset.is-set (IsLattice.is-poset (LatticeStr.isLattice N)) _ _)))))

ùíÆ·¥∞-Lattice : DUARel (ùíÆ-Univ ‚Ñì) (LatticeStr ‚Ñì') (‚Ñì-max ‚Ñì ‚Ñì')
ùíÆ·¥∞-Lattice =
  ùíÆ·¥∞-Record (ùíÆ-Univ _) IsLatticeEquiv
    (fields:
      data[ _‚â§_  ‚à£ autoDUARel _ _ ‚à£ pres‚â§ ]
      data[ _‚à®l_ ‚à£ autoDUARel _ _ ‚à£ pres‚à® ]
      data[ _‚àßl_ ‚à£ autoDUARel _ _ ‚à£ pres‚àß ]
      data[ 0l   ‚à£ autoDUARel _ _ ‚à£ pres0 ]
      data[ 1l   ‚à£ autoDUARel _ _ ‚à£ pres1 ]
      prop[ isLattice ‚à£ (Œª _ _ ‚Üí isPropIsLattice _ _ _ _ _) ])
    where
    open LatticeStr
    open IsLattice
    open IsLatticeEquiv

LatticePath : (M N : Lattice ‚Ñì ‚Ñì') ‚Üí LatticeEquiv M N ‚âÉ (M ‚â° N)
LatticePath = ‚à´ ùíÆ·¥∞-Lattice .UARel.ua

-- an easier way of establishing an equivalence of lattices; poset equivs are lattice equivs
module _ {P : Lattice ‚Ñì‚ÇÄ ‚Ñì‚ÇÄ'} {S : Lattice ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ'} (e : ‚ü® P ‚ü© ‚âÉ ‚ü® S ‚ü©) where
  private
    module P = LatticeStr (P .snd)
    module S = LatticeStr (S .snd)

    Ppos : PosetStr ‚Ñì‚ÇÄ' ‚ü® P ‚ü©
    Ppos = LatticeStr‚ÜíPosetStr (P .snd)

    Spos : PosetStr ‚Ñì‚ÇÅ' ‚ü® S ‚ü©
    Spos = LatticeStr‚ÜíPosetStr (S .snd)

  module _ (isPosetEquiv : IsPosetEquiv Ppos e Spos) where
    open LatticeStr
    open IsLatticeEquiv
    open IsLattice

    makeIsLatticeEquiv : IsLatticeEquiv (P .snd) e (S .snd)
    pres‚â§ makeIsLatticeEquiv = IsPosetEquiv.pres‚â§ isPosetEquiv
    pres‚à® makeIsLatticeEquiv x y
      = isJoinUnique (PosetStr.isPoset Spos)
                     (equivFun e x)
                     (equivFun e y)
                     (equivFun e (x P.‚à®l y))
                     (equivFun e x S.‚à®l equivFun e y)
                     (equivFun (IsPosetEquivRespectsJoin (e , isPosetEquiv) x y (x P.‚à®l y))
                               (is-join (isLattice (P .snd)) x y))
                     (is-join (isLattice (S .snd)) (equivFun e x) (equivFun e y))
    pres‚àß makeIsLatticeEquiv x y
      = isMeetUnique (PosetStr.isPoset Spos)
                     (equivFun e x)
                     (equivFun e y)
                     (equivFun e (x P.‚àßl y))
                     (equivFun e x S.‚àßl equivFun e y)
                     (equivFun (IsPosetEquivRespectsMeet (e , isPosetEquiv) x y (x P.‚àßl y))
                               (is-meet (isLattice (P .snd)) x y))
                     (is-meet (isLattice (S .snd)) (equivFun e x) (equivFun e y))
    pres0 makeIsLatticeEquiv
      = isLeastUnique (PosetStr.isPoset Spos)
                      {P = ‚ü® S ‚ü© , id‚Ü™ ‚ü® S ‚ü©}
                      (equivFun e P.0l)
                       S.0l
                      (Œª x ‚Üí subst (equivFun e P.0l S.‚â§_)
                                   (secEq e x)
                                   (equivFun (IsPosetEquiv.pres‚â§ isPosetEquiv P.0l (invEq e x))
                                             (P.is-least (invEq e x))))
                      (is-least (isLattice (S .snd)))
    pres1 makeIsLatticeEquiv
      = isGreatestUnique (PosetStr.isPoset Spos)
                         {P = ‚ü® S ‚ü© , id‚Ü™ ‚ü® S ‚ü©}
                         (equivFun e P.1l)
                          S.1l
                         (Œª x ‚Üí subst (S._‚â§ equivFun e P.1l)
                                      (secEq e x)
                                      (equivFun (IsPosetEquiv.pres‚â§ isPosetEquiv (invEq e x) P.1l)
                                                (P.is-greatest (invEq e x))))
                         (is-greatest (isLattice (S .snd)))
