{-# OPTIONS --safe #-}
module Cubical.Relation.Binary.Order.Poset.Lattices.MeetSemipseudolattice.Base where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Equiv.HalfAdjoint
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.Univalence
open import Cubical.Foundations.Transport
open import Cubical.Foundations.SIP

open import Cubical.Data.Sigma

open import Cubical.Reflection.RecordEquiv
open import Cubical.Reflection.StrictEquiv

open import Cubical.Displayed.Base
open import Cubical.Displayed.Auto
open import Cubical.Displayed.Record
open import Cubical.Displayed.Universe

open import Cubical.Relation.Binary.Base
open import Cubical.Relation.Binary.Order.Poset.Base
open import Cubical.Relation.Binary.Order.Poset.Properties

open Iso
open BinaryRelation


private
  variable
    ‚Ñì ‚Ñì' ‚Ñì'' ‚Ñì‚ÇÄ ‚Ñì‚ÇÄ' ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ' : Level

record IsMeetSemipseudolattice {A : Type ‚Ñì} (_‚â§_ : A ‚Üí A ‚Üí Type ‚Ñì') (_‚àßl_ : A ‚Üí A ‚Üí A) : Type (‚Ñì-max ‚Ñì ‚Ñì') where
  no-eta-equality
  constructor ismeetsemipseudolattice

  field
    is-poset : IsPoset _‚â§_
    is-meet : ‚àÄ a b x ‚Üí x ‚â§ (a ‚àßl b) ‚âÉ (x ‚â§ a) √ó (x ‚â§ b)

unquoteDecl IsMeetSemipseudolatticeIsoŒ£ = declareRecordIsoŒ£ IsMeetSemipseudolatticeIsoŒ£ (quote IsMeetSemipseudolattice)


record MeetSemipseudolatticeStr (‚Ñì' : Level) (A : Type ‚Ñì) : Type (‚Ñì-max ‚Ñì (‚Ñì-suc ‚Ñì')) where

  constructor meetsemipseudolatticestr

  field
    _‚â§_     : A ‚Üí A ‚Üí Type ‚Ñì'
    _‚àßl_    : A ‚Üí A ‚Üí A
    isMeetSemipseudolattice : IsMeetSemipseudolattice _‚â§_ _‚àßl_

  infixl 7 _‚â§_
  infixl 8 _‚àßl_

  open IsMeetSemipseudolattice isMeetSemipseudolattice public

MeetSemipseudolatticeStr‚ÜíPosetStr : ‚àÄ{‚Ñì'} ‚Üí {A : Type ‚Ñì} ‚Üí (MeetSemipseudolatticeStr ‚Ñì' A) ‚Üí (PosetStr ‚Ñì' A)
MeetSemipseudolatticeStr‚ÜíPosetStr meet = posetstr (MeetSemipseudolatticeStr._‚â§_ meet)
                                                  (IsMeetSemipseudolattice.is-poset
                                                    (MeetSemipseudolatticeStr.isMeetSemipseudolattice meet))

MeetSemipseudolattice : ‚àÄ ‚Ñì ‚Ñì' ‚Üí Type (‚Ñì-max (‚Ñì-suc ‚Ñì) (‚Ñì-suc ‚Ñì'))
MeetSemipseudolattice ‚Ñì ‚Ñì' = TypeWithStr ‚Ñì (MeetSemipseudolatticeStr ‚Ñì')

meetsemipseudolattice : (A : Type ‚Ñì) ‚Üí (_‚â§_ : Rel A A ‚Ñì') ‚Üí (_‚àßl_ : A ‚Üí A ‚Üí A) ‚Üí IsMeetSemipseudolattice _‚â§_ _‚àßl_ ‚Üí MeetSemipseudolattice ‚Ñì ‚Ñì'
meetsemipseudolattice A _‚â§_ _‚àßl_ lat = A , (meetsemipseudolatticestr _‚â§_ _‚àßl_ lat)


record IsMeetSemipseudolatticeEquiv {A : Type ‚Ñì‚ÇÄ} {B : Type ‚Ñì‚ÇÅ}
  (M : MeetSemipseudolatticeStr ‚Ñì‚ÇÄ' A) (e : A ‚âÉ B) (N : MeetSemipseudolatticeStr ‚Ñì‚ÇÅ' B)
  : Type (‚Ñì-max (‚Ñì-max ‚Ñì‚ÇÄ ‚Ñì‚ÇÅ) (‚Ñì-max ‚Ñì‚ÇÄ' ‚Ñì‚ÇÅ'))
  where
  constructor
   ismeetsemipseudolatticeequiv
  -- Shorter qualified names
  private
    module M = MeetSemipseudolatticeStr M
    module N = MeetSemipseudolatticeStr N

  field
    pres‚â§ : (x y : A) ‚Üí x M.‚â§ y ‚âÉ equivFun e x N.‚â§ equivFun e y
    pres‚àß : (x y : A) ‚Üí equivFun e (x M.‚àßl y) ‚â° (equivFun e x) N.‚àßl (equivFun e y)

unquoteDecl IsMeetSemipseudolatticeEquivIsoŒ£ = declareRecordIsoŒ£ IsMeetSemipseudolatticeEquivIsoŒ£ (quote IsMeetSemipseudolatticeEquiv)

MeetSemipseudolatticeEquiv : (M : MeetSemipseudolattice ‚Ñì‚ÇÄ ‚Ñì‚ÇÄ') (M : MeetSemipseudolattice ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ') ‚Üí Type (‚Ñì-max (‚Ñì-max ‚Ñì‚ÇÄ ‚Ñì‚ÇÄ') (‚Ñì-max ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ'))
MeetSemipseudolatticeEquiv M N = Œ£[ e ‚àà ‚ü® M ‚ü© ‚âÉ ‚ü® N ‚ü© ] IsMeetSemipseudolatticeEquiv (M .snd) e (N .snd)

isPropIsMeetSemipseudolattice : {A : Type ‚Ñì} (_‚â§_ : A ‚Üí A ‚Üí Type ‚Ñì') (_‚àßl_ : A ‚Üí A ‚Üí A) ‚Üí isProp (IsMeetSemipseudolattice _‚â§_ _‚àßl_)
isPropIsMeetSemipseudolattice _‚â§_ _‚àßl_ = isOfHLevelRetractFromIso 1 IsMeetSemipseudolatticeIsoŒ£
  (isPropŒ£ (isPropIsPoset _‚â§_)
    Œª pos ‚Üí isPropŒ†3 Œª _ _ _ ‚Üí isOfHLevel‚âÉ 1 (IsPoset.is-prop-valued pos _ _)
                                             (isProp√ó (IsPoset.is-prop-valued pos _ _)
                                                      (IsPoset.is-prop-valued pos _ _)))

isPropIsMeetSemipseudolatticeEquiv : {A : Type ‚Ñì‚ÇÄ} {B : Type ‚Ñì‚ÇÅ}
                                     (M : MeetSemipseudolatticeStr ‚Ñì‚ÇÄ' A)
                                     (e : A ‚âÉ B)
                                     (N : MeetSemipseudolatticeStr ‚Ñì‚ÇÅ' B)
                                   ‚Üí isProp (IsMeetSemipseudolatticeEquiv M e N)
isPropIsMeetSemipseudolatticeEquiv M e N = isOfHLevelRetractFromIso 1 IsMeetSemipseudolatticeEquivIsoŒ£
  (isProp√ó
    (isPropŒ†2 Œª _ _ ‚Üí isOfHLevel‚âÉ 1
                                (IsPoset.is-prop-valued (IsMeetSemipseudolattice.is-poset
                                                        (MeetSemipseudolatticeStr.isMeetSemipseudolattice M)) _ _)
                                (IsPoset.is-prop-valued (IsMeetSemipseudolattice.is-poset
                                                        (MeetSemipseudolatticeStr.isMeetSemipseudolattice N)) _ _))
   (isPropŒ†2 Œª _ _ ‚Üí IsPoset.is-set (IsMeetSemipseudolattice.is-poset
                                   (MeetSemipseudolatticeStr.isMeetSemipseudolattice N)) _ _))

ùíÆ·¥∞-MeetSemipseudolattice : DUARel (ùíÆ-Univ ‚Ñì) (MeetSemipseudolatticeStr ‚Ñì') (‚Ñì-max ‚Ñì ‚Ñì')
ùíÆ·¥∞-MeetSemipseudolattice =
  ùíÆ·¥∞-Record (ùíÆ-Univ _) IsMeetSemipseudolatticeEquiv
    (fields:
      data[ _‚â§_  ‚à£ autoDUARel _ _ ‚à£ pres‚â§ ]
      data[ _‚àßl_ ‚à£ autoDUARel _ _ ‚à£ pres‚àß ]
      prop[ isMeetSemipseudolattice ‚à£ (Œª _ _ ‚Üí isPropIsMeetSemipseudolattice _ _) ])
    where
    open MeetSemipseudolatticeStr
    open IsMeetSemipseudolattice
    open IsMeetSemipseudolatticeEquiv

MeetSemipseudolatticePath : (M N : MeetSemipseudolattice ‚Ñì ‚Ñì') ‚Üí MeetSemipseudolatticeEquiv M N ‚âÉ (M ‚â° N)
MeetSemipseudolatticePath = ‚à´ ùíÆ·¥∞-MeetSemipseudolattice .UARel.ua

-- an easier way of establishing an equivalence of meet semipseudolattices; poset equivs are lattice equivs
module _ {P : MeetSemipseudolattice ‚Ñì‚ÇÄ ‚Ñì‚ÇÄ'} {S : MeetSemipseudolattice ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ'} (e : ‚ü® P ‚ü© ‚âÉ ‚ü® S ‚ü©) where
  private
    module P = MeetSemipseudolatticeStr (P .snd)
    module S = MeetSemipseudolatticeStr (S .snd)

    Ppos : PosetStr ‚Ñì‚ÇÄ' ‚ü® P ‚ü©
    Ppos = MeetSemipseudolatticeStr‚ÜíPosetStr (P .snd)

    Spos : PosetStr ‚Ñì‚ÇÅ' ‚ü® S ‚ü©
    Spos = MeetSemipseudolatticeStr‚ÜíPosetStr (S .snd)

  module _ (isPosetEquiv : IsPosetEquiv Ppos e Spos) where
    open MeetSemipseudolatticeStr
    open IsMeetSemipseudolatticeEquiv
    open IsMeetSemipseudolattice

    makeIsMeetSemipseudolatticeEquiv : IsMeetSemipseudolatticeEquiv (P .snd) e (S .snd)
    pres‚â§ makeIsMeetSemipseudolatticeEquiv = IsPosetEquiv.pres‚â§ isPosetEquiv
    pres‚àß makeIsMeetSemipseudolatticeEquiv x y
      = isMeetUnique (PosetStr.isPoset Spos)
                     (equivFun e x)
                     (equivFun e y)
                     (equivFun e (x P.‚àßl y))
                     (equivFun e x S.‚àßl equivFun e y)
                     (equivFun (IsPosetEquivRespectsMeet (e , isPosetEquiv) x y (x P.‚àßl y))
                               (is-meet (isMeetSemipseudolattice (P .snd)) x y))
                     (is-meet (isMeetSemipseudolattice (S .snd)) (equivFun e x) (equivFun e y))
