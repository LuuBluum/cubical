{-# OPTIONS --safe #-}
module Cubical.Relation.Binary.Order.Poset.Lattices.MeetSemilattice.Base where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Equiv.HalfAdjoint
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.Univalence
open import Cubical.Foundations.Transport
open import Cubical.Foundations.SIP

open import Cubical.Functions.Embedding

open import Cubical.Data.Sigma

open import Cubical.Reflection.RecordEquiv
open import Cubical.Reflection.StrictEquiv

open import Cubical.Displayed.Base
open import Cubical.Displayed.Auto
open import Cubical.Displayed.Record
open import Cubical.Displayed.Universe

open import Cubical.Relation.Binary.Base
open import Cubical.Relation.Binary.Order.Poset.Base
open import Cubical.Relation.Binary.Order.Poset.Properties

open Iso
open BinaryRelation


private
  variable
    ‚Ñì ‚Ñì' ‚Ñì'' ‚Ñì‚ÇÄ ‚Ñì‚ÇÄ' ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ' : Level

record IsMeetSemilattice {A : Type ‚Ñì} (_‚â§_ : A ‚Üí A ‚Üí Type ‚Ñì') (_‚àßl_ : A ‚Üí A ‚Üí A) (0l : A) : Type (‚Ñì-max ‚Ñì ‚Ñì') where
  no-eta-equality
  constructor ismeetsemilattice

  field
    is-poset : IsPoset _‚â§_
    is-meet : ‚àÄ a b x ‚Üí x ‚â§ (a ‚àßl b) ‚âÉ (x ‚â§ a) √ó (x ‚â§ b)
    is-least : ‚àÄ x ‚Üí 0l ‚â§ x

unquoteDecl IsMeetSemilatticeIsoŒ£ = declareRecordIsoŒ£ IsMeetSemilatticeIsoŒ£ (quote IsMeetSemilattice)


record MeetSemilatticeStr (‚Ñì' : Level) (A : Type ‚Ñì) : Type (‚Ñì-max ‚Ñì (‚Ñì-suc ‚Ñì')) where

  constructor meetsemilatticestr

  field
    _‚â§_     : A ‚Üí A ‚Üí Type ‚Ñì'
    _‚àßl_    : A ‚Üí A ‚Üí A
    0l      : A
    isMeetSemilattice : IsMeetSemilattice _‚â§_ _‚àßl_ 0l

  infixl 7 _‚â§_
  infixl 8 _‚àßl_

  open IsMeetSemilattice isMeetSemilattice public

MeetSemilatticeStr‚ÜíPosetStr : ‚àÄ{‚Ñì'} ‚Üí {A : Type ‚Ñì} ‚Üí (MeetSemilatticeStr ‚Ñì' A) ‚Üí (PosetStr ‚Ñì' A)
MeetSemilatticeStr‚ÜíPosetStr meet = posetstr (MeetSemilatticeStr._‚â§_ meet)
                                                  (IsMeetSemilattice.is-poset
                                                    (MeetSemilatticeStr.isMeetSemilattice meet))

MeetSemilattice : ‚àÄ ‚Ñì ‚Ñì' ‚Üí Type (‚Ñì-max (‚Ñì-suc ‚Ñì) (‚Ñì-suc ‚Ñì'))
MeetSemilattice ‚Ñì ‚Ñì' = TypeWithStr ‚Ñì (MeetSemilatticeStr ‚Ñì')

meetsemilattice : (A : Type ‚Ñì) ‚Üí (_‚â§_ : Rel A A ‚Ñì') ‚Üí (_‚àßl_ : A ‚Üí A ‚Üí A) (0l : A) ‚Üí IsMeetSemilattice _‚â§_ _‚àßl_ 0l ‚Üí MeetSemilattice ‚Ñì ‚Ñì'
meetsemilattice A _‚â§_ _‚àßl_ 0l lat = A , (meetsemilatticestr _‚â§_ _‚àßl_ 0l lat)


record IsMeetSemilatticeEquiv {A : Type ‚Ñì‚ÇÄ} {B : Type ‚Ñì‚ÇÅ}
  (M : MeetSemilatticeStr ‚Ñì‚ÇÄ' A) (e : A ‚âÉ B) (N : MeetSemilatticeStr ‚Ñì‚ÇÅ' B)
  : Type (‚Ñì-max (‚Ñì-max ‚Ñì‚ÇÄ ‚Ñì‚ÇÅ) (‚Ñì-max ‚Ñì‚ÇÄ' ‚Ñì‚ÇÅ'))
  where
  constructor
   ismeetsemilatticeequiv
  -- Shorter qualified names
  private
    module M = MeetSemilatticeStr M
    module N = MeetSemilatticeStr N

  field
    pres‚â§ : (x y : A) ‚Üí x M.‚â§ y ‚âÉ equivFun e x N.‚â§ equivFun e y
    pres‚àß : (x y : A) ‚Üí equivFun e (x M.‚àßl y) ‚â° (equivFun e x) N.‚àßl (equivFun e y)
    pres0 : equivFun e M.0l ‚â° N.0l

  pres‚â§‚Åª : (x y : B) ‚Üí x N.‚â§ y ‚âÉ invEq e x M.‚â§ invEq e y
  pres‚â§‚Åª x y = invEquiv (compEquiv (pres‚â§ (invEq e x) (invEq e y))
                                    (subst2Equiv N._‚â§_ (secEq e x) (secEq e y)))

unquoteDecl IsMeetSemilatticeEquivIsoŒ£ = declareRecordIsoŒ£ IsMeetSemilatticeEquivIsoŒ£ (quote IsMeetSemilatticeEquiv)

MeetSemilatticeEquiv : (M : MeetSemilattice ‚Ñì‚ÇÄ ‚Ñì‚ÇÄ') (M : MeetSemilattice ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ') ‚Üí Type (‚Ñì-max (‚Ñì-max ‚Ñì‚ÇÄ ‚Ñì‚ÇÄ') (‚Ñì-max ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ'))
MeetSemilatticeEquiv M N = Œ£[ e ‚àà ‚ü® M ‚ü© ‚âÉ ‚ü® N ‚ü© ] IsMeetSemilatticeEquiv (M .snd) e (N .snd)

isPropIsMeetSemilattice : {A : Type ‚Ñì} (_‚â§_ : A ‚Üí A ‚Üí Type ‚Ñì') (_‚àßl_ : A ‚Üí A ‚Üí A) (0l : A) ‚Üí isProp (IsMeetSemilattice _‚â§_ _‚àßl_ 0l)
isPropIsMeetSemilattice _‚â§_ _‚àßl_ 0l = isOfHLevelRetractFromIso 1 IsMeetSemilatticeIsoŒ£
  (isPropŒ£ (isPropIsPoset _‚â§_)
    Œª pos ‚Üí isProp√ó (isPropŒ†3 Œª _ _ _ ‚Üí isOfHLevel‚âÉ 1 (IsPoset.is-prop-valued pos _ _)
                                                      (isProp√ó (IsPoset.is-prop-valued pos _ _)
                                                               (IsPoset.is-prop-valued pos _ _)))
                    (isPropŒ† Œª _ ‚Üí IsPoset.is-prop-valued pos _ _))

isPropIsMeetSemilatticeEquiv : {A : Type ‚Ñì‚ÇÄ} {B : Type ‚Ñì‚ÇÅ}
                                     (M : MeetSemilatticeStr ‚Ñì‚ÇÄ' A)
                                     (e : A ‚âÉ B)
                                     (N : MeetSemilatticeStr ‚Ñì‚ÇÅ' B)
                                   ‚Üí isProp (IsMeetSemilatticeEquiv M e N)
isPropIsMeetSemilatticeEquiv M e N = isOfHLevelRetractFromIso 1 IsMeetSemilatticeEquivIsoŒ£
  (isProp√ó
    (isPropŒ†2 Œª _ _ ‚Üí isOfHLevel‚âÉ 1
                                (IsPoset.is-prop-valued (IsMeetSemilattice.is-poset
                                                        (MeetSemilatticeStr.isMeetSemilattice M)) _ _)
                                (IsPoset.is-prop-valued (IsMeetSemilattice.is-poset
                                                        (MeetSemilatticeStr.isMeetSemilattice N)) _ _))
  (isProp√ó (isPropŒ†2 (Œª _ _ ‚Üí IsPoset.is-set (IsMeetSemilattice.is-poset
                                             (MeetSemilatticeStr.isMeetSemilattice N)) _ _))
                             (IsPoset.is-set (IsMeetSemilattice.is-poset
                                             (MeetSemilatticeStr.isMeetSemilattice N)) _ _)))

ùíÆ·¥∞-MeetSemilattice : DUARel (ùíÆ-Univ ‚Ñì) (MeetSemilatticeStr ‚Ñì') (‚Ñì-max ‚Ñì ‚Ñì')
ùíÆ·¥∞-MeetSemilattice =
  ùíÆ·¥∞-Record (ùíÆ-Univ _) IsMeetSemilatticeEquiv
    (fields:
      data[ _‚â§_  ‚à£ autoDUARel _ _ ‚à£ pres‚â§ ]
      data[ _‚àßl_ ‚à£ autoDUARel _ _ ‚à£ pres‚àß ]
      data[ 0l   ‚à£ autoDUARel _ _ ‚à£ pres0 ]
      prop[ isMeetSemilattice ‚à£ (Œª _ _ ‚Üí isPropIsMeetSemilattice _ _ _) ])
    where
    open MeetSemilatticeStr
    open IsMeetSemilattice
    open IsMeetSemilatticeEquiv

MeetSemilatticePath : (M N : MeetSemilattice ‚Ñì ‚Ñì') ‚Üí MeetSemilatticeEquiv M N ‚âÉ (M ‚â° N)
MeetSemilatticePath = ‚à´ ùíÆ·¥∞-MeetSemilattice .UARel.ua

-- an easier way of establishing an equivalence of meet semilattices; poset equivs are lattice equivs
module _ {P : MeetSemilattice ‚Ñì‚ÇÄ ‚Ñì‚ÇÄ'} {S : MeetSemilattice ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ'} (e : ‚ü® P ‚ü© ‚âÉ ‚ü® S ‚ü©) where
  private
    module P = MeetSemilatticeStr (P .snd)
    module S = MeetSemilatticeStr (S .snd)

    Ppos : PosetStr ‚Ñì‚ÇÄ' ‚ü® P ‚ü©
    Ppos = MeetSemilatticeStr‚ÜíPosetStr (P .snd)

    Spos : PosetStr ‚Ñì‚ÇÅ' ‚ü® S ‚ü©
    Spos = MeetSemilatticeStr‚ÜíPosetStr (S .snd)

  module _ (isPosetEquiv : IsPosetEquiv Ppos e Spos) where
    open MeetSemilatticeStr
    open IsMeetSemilatticeEquiv
    open IsMeetSemilattice

    makeIsMeetSemilatticeEquiv : IsMeetSemilatticeEquiv (P .snd) e (S .snd)
    pres‚â§ makeIsMeetSemilatticeEquiv = IsPosetEquiv.pres‚â§ isPosetEquiv
    pres‚àß makeIsMeetSemilatticeEquiv x y
      = isMeetUnique (PosetStr.isPoset Spos)
                     (equivFun e x)
                     (equivFun e y)
                     (equivFun e (x P.‚àßl y))
                     (equivFun e x S.‚àßl equivFun e y)
                     (equivFun (IsPosetEquivRespectsMeet (e , isPosetEquiv) x y (x P.‚àßl y))
                               (is-meet (isMeetSemilattice (P .snd)) x y))
                     (is-meet (isMeetSemilattice (S .snd)) (equivFun e x) (equivFun e y))
    pres0 makeIsMeetSemilatticeEquiv
      = isLeastUnique (PosetStr.isPoset Spos)
                      {P = ‚ü® S ‚ü© , id‚Ü™ ‚ü® S ‚ü©}
                      (equivFun e P.0l)
                       S.0l
                      (Œª x ‚Üí subst (equivFun e P.0l S.‚â§_)
                                   (secEq e x)
                                   (equivFun (IsPosetEquiv.pres‚â§ isPosetEquiv P.0l (invEq e x))
                                             (P.is-least (invEq e x))))
                      (is-least (isMeetSemilattice (S .snd)))
